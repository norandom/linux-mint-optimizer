---
# Advanced Performance Optimizations for AI Workloads in Docker on qcow2 VMs

# Security vs Performance Trade-offs
- name: Disable speculative execution mitigations for performance
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/99-advanced-performance.conf
    reload: yes
  loop:
    - { key: "kernel.unprivileged_bpf_disabled", value: "1" }
    - { key: "net.core.bpf_jit_enable", value: "1" }
    - { key: "net.core.bpf_jit_harden", value: "0" }  # Disable JIT hardening for speed
  notify: sysctl reloaded

- name: Configure GRUB for performance over security
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash elevator=mq-deadline transparent_hugepage=madvise mitigations=off audit=0 intel_idle.max_cstate=1"'
    backup: yes
  register: grub_security_config
  notify: update grub

# Huge Pages Configuration for Docker
- name: Calculate huge pages (reserve 25% of RAM for huge pages)
  shell: |
    total_mem_kb=$(grep MemTotal /proc/meminfo | awk '{print $2}')
    hugepage_size_kb=$(grep Hugepagesize /proc/meminfo | awk '{print $2}')
    hugepages_25pct=$((total_mem_kb / 4 / hugepage_size_kb))
    echo $hugepages_25pct
  register: hugepages_count
  changed_when: false

- name: Configure huge pages allocation
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/99-advanced-performance.conf
    reload: yes
  loop:
    - { key: "vm.nr_hugepages", value: "{{ hugepages_count.stdout }}" }
    - { key: "vm.hugetlb_shm_group", value: "999" }  # docker group
    - { key: "kernel.shmmax", value: "{{ (hugepages_count.stdout | int * 2048 * 1024) | string }}" }
    - { key: "kernel.shmall", value: "{{ (hugepages_count.stdout | int * 512) | string }}" }

- name: Create hugepages mount point
  file:
    path: /mnt/hugepages
    state: directory
    mode: '0755'

- name: Mount huge pages filesystem
  mount:
    path: /mnt/hugepages
    src: hugetlbfs
    fstype: hugetlbfs
    opts: defaults,gid=999,mode=1770
    state: mounted

- name: Add docker group to hugepages
  group:
    name: docker
    gid: 999
    state: present

# Low Latency Network Optimizations
- name: Configure network for low latency
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/99-advanced-performance.conf
    reload: yes
  loop:
    # TCP optimizations for low latency
    - { key: "net.core.rmem_max", value: "134217728" }        # 128MB receive buffer
    - { key: "net.core.wmem_max", value: "134217728" }        # 128MB send buffer
    - { key: "net.core.netdev_max_backlog", value: "5000" }   # Increase queue
    - { key: "net.core.netdev_budget", value: "600" }         # Process more packets per interrupt
    - { key: "net.ipv4.tcp_rmem", value: "4096 87380 134217728" }
    - { key: "net.ipv4.tcp_wmem", value: "4096 65536 134217728" }
    - { key: "net.ipv4.tcp_congestion_control", value: "bbr" } # Better congestion control
    - { key: "net.ipv4.tcp_fastopen", value: "3" }            # Enable TCP Fast Open
    - { key: "net.ipv4.tcp_low_latency", value: "1" }         # Low latency mode
    - { key: "net.ipv4.tcp_timestamps", value: "0" }          # Disable for lower overhead
    - { key: "net.ipv4.tcp_sack", value: "1" }                # Selective ACK
    - { key: "net.ipv4.tcp_window_scaling", value: "1" }      # Window scaling
    - { key: "net.ipv4.tcp_no_metrics_save", value: "1" }     # Don't cache metrics
    - { key: "net.ipv4.tcp_moderate_rcvbuf", value: "1" }     # Auto-tune receive buffer

# Careful Filesystem Optimizations for qcow2
- name: Get current mount options for root filesystem
  shell: mount | grep ' / ' | cut -d' ' -f6 | tr -d '()'
  register: current_mount_options
  changed_when: false

- name: Add performance mount options to fstab (careful for qcow2)
  replace:
    path: /etc/fstab
    regexp: '(\S+\s+/\s+\S+\s+)(\S+)(\s+.*)'
    replace: '\1\2,noatime,commit=60\3'
    backup: yes
  when: "'noatime' not in current_mount_options.stdout"
  notify: remount root

- name: Configure I/O scheduler tunables for better qcow2 performance
  shell: |
    for disk in /sys/block/*/queue; do
      if [ -f "$disk/scheduler" ] && [ -f "$disk/read_ahead_kb" ]; then
        echo 128 > "$disk/read_ahead_kb"          # Increase read-ahead for qcow2
        echo 1 > "$disk/iosched/fifo_batch"       # Better for VMs
        echo 250 > "$disk/iosched/read_expire"    # Reduce read latency
        echo 5000 > "$disk/iosched/write_expire"  # Allow more write batching
      fi
    done
  register: io_tuning_result
  changed_when: false

# CPU C-State Optimizations (while keeping ondemand governor)
- name: Check available CPU C-states
  shell: |
    if [ -d /sys/devices/system/cpu/cpu0/cpuidle ]; then
      ls /sys/devices/system/cpu/cpu0/cpuidle/
    else
      echo "no_cpuidle"
    fi
  register: cstate_check
  changed_when: false

- name: Disable deep C-states for consistent performance (keep C0, C1 only)
  shell: |
    for cpu in /sys/devices/system/cpu/cpu*/cpuidle/state*; do
      if [ -f "$cpu/disable" ]; then
        state_name=$(cat "$cpu/name" 2>/dev/null || echo "unknown")
        # Disable states deeper than C1 for consistent performance
        if [[ "$state_name" =~ (C[2-9]|C[0-9][0-9]) ]]; then
          echo 1 > "$cpu/disable"
        fi
      fi
    done
  when: cstate_check.stdout != "no_cpuidle"
  register: cstate_result
  changed_when: false

# Docker-specific optimizations
- name: Configure Docker daemon for performance
  copy:
    content: |
      {
        "storage-driver": "overlay2",
        "storage-opts": ["overlay2.override_kernel_check=true"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "default-ulimits": {
          "memlock": {"Name": "memlock", "Soft": -1, "Hard": -1}
        },
        "default-shm-size": "1g"
      }
    dest: /etc/docker/daemon.json
    backup: yes
  notify: restart docker

- name: Display advanced performance optimization status
  debug:
    msg:
      - "Advanced Performance optimizations applied:"
      - "- Security mitigations: disabled (mitigations=off)"
      - "- Audit logging: disabled (audit=0)"
      - "- Huge pages: {{ hugepages_count.stdout }} pages (25% of RAM)"
      - "- Huge pages mount: /mnt/hugepages"
      - "- Network: optimized for low latency (BBR, TCP Fast Open)"
      - "- Filesystem: noatime, commit=60 (qcow2-safe)"
      - "- CPU C-states: limited to C0/C1 (consistent performance)"
      - "- Docker: configured for huge pages and performance"
      - "- I/O scheduler: tuned for VM workloads"
      - "Note: Reboot required for full optimization"